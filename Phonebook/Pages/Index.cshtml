@page
@{
    ViewData["Title"] = "PhoneNumbers";
}

<h2>Телефонный справочник</h2>

@(Html.DevExtreme().DataGrid<Phonebook.Models.PhoneNumber.PhoneNumber>()
    .ID("PhoneNumbers")
    .DataSource(ds => ds.Mvc()
        .Controller("PhoneNumbersWebApi")
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("ID")
    )
    .FilterRow(filterRow => filterRow
        .Visible(true)
        .ApplyFilter(GridApplyFilterMode.Auto)
    )
    .HeaderFilter(headerFilter => headerFilter.Visible(true))
    .LoadPanel(loadPanel => loadPanel.Enabled(false))
    .Scrolling(scrolling => scrolling
        .Mode(GridScrollingMode.Virtual)
        .RowRenderingMode(GridRowRenderingMode.Virtual))
    .Paging(p => p.PageSize(50))
    .RemoteOperations(true)
    .FocusedRowEnabled(true)
    .Columns(columns => {

        columns.AddFor(m => m.DistrictId)
            .SetCellValue("setDistrictValue")
            .Lookup(lookup => lookup
                    .DataSource(d => d.Mvc().Controller("TerritorialUnitsWebApi").LoadAction("GetDistricts").Key("ID"))
                    .ValueExpr("ID")
                    .DisplayExpr("Name")
                );

        columns.AddFor(m => m.MicrodistrictId)
            .Lookup(lookup => lookup
                    .DataSource("getMicrodistricts")
                    .ValueExpr("ID")
                    .DisplayExpr("Name")
                );

        columns.AddFor(m => m.Address);

        columns.AddFor(m => m.FullName);

        columns.AddFor(m => m.Number)
            .CellTemplate(new JS("customizePhoneNumber"))
            .ValidationRules(vr =>
            {
                vr.AddAsync()
                    .Message("Данный номер уже есть в телефонном справочнике.")
                    .ValidationCallback("asyncValidationNumber");
            });

        columns.AddFor(m => m.Note);


        columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Visible(false);
    })
    .Editing(e => e
        .Mode(GridEditMode.Popup)
        .AllowAdding(true)
        .AllowUpdating(true)
        .Texts(texts => texts.AddRow("Добавить телефон"))
        .AllowDeleting(true)
        .UseIcons(true)
        .Popup(p => p
            .Title("Телефонная карточка")
            .ID("PhoneNumbersPopup")
            .ShowTitle(true)
            .MaxWidth(700)
            .Height(525)
            .ToolbarItems(ti =>
            {
                ti.Add()
                   .Widget(w => w.Button()
                       .Text("Удалить")
                       .OnClick("deletePhoneNumber")
                       .ID("DeletePhoneNumberButton"))
                   .Location(ToolbarItemLocation.Before)
                   .Toolbar(Toolbar.Bottom);

                ti.Add()
                    .Widget(w => w.Button()
                        .Text("Сохранить")
                        .OnClick("savePhoneNumber"))
                    .Location(ToolbarItemLocation.After)
                    .Toolbar(Toolbar.Bottom);

            })
        )
        .Form(f => f.Items(items =>
        {
            items.AddGroup()
                .ColCount(1)
                .ColSpan(2)
                .Items(groupItems =>
                {
                    groupItems.AddSimpleFor(m => m.DistrictId);
                    groupItems.AddSimpleFor(m => m.MicrodistrictId);
                    groupItems.AddSimpleFor(m => m.Address);
                    groupItems.AddSimpleFor(m => m.FullName);
                    groupItems.AddSimpleFor(m => m.Number)
                            .Editor(e => e
                                .TextBox()
                                .Mask("+7 (X00) 000-00-00")
                                .MaskRules(new { X = new JS("/[02-9]/") })
                            );

                    groupItems.AddSimpleFor(m => m.Note)
                        .Editor(editor => editor.TextArea().Height(100));
                });
        })
        .ID("PhoneNumbersForm"))

    )
    .OnEditorPreparing("onEditorPreparing")
    .OnToolbarPreparing("customizeAddBtn")
)
<style>
    .JQ_EditButton {
        display: none;
    }
</style>
<script type="text/javascript">
    //displays the phone number in table in the correct form and adds click event
    function customizePhoneNumber($cell, cellInfo) {
        rowIndex = cellInfo.rowIndex;
        number = cellInfo.text;
        formatedNumber = number ? "+7(" + number.slice(0, 3) + ")" + number.slice(3, 6) + "-" + number.slice(6, 8) + "-" + number.slice(8, 10) : "";
        $cell.append("<a href='#' onclick='clickEditBtn(" + rowIndex + ")'>" + formatedNumber +"</a>");
    }

    //trigger click Edit button by link on Phone Number
    function clickEditBtn(rowIndex) {
        var dataGrid = $("#PhoneNumbers").dxDataGrid("instance");
        dataGrid.editRow(rowIndex);
        dataGrid.option("focusedRowIndex", rowIndex);
    }

    //for cascading lookup district-microdistrict
    function onEditorPreparing(e) {
        if(e.parentType === "dataRow" && e.dataField === "MicrodistrictId") {
            e.editorOptions.disabled = (typeof e.row.data.DistrictId !== "number");
        }
    }
    function getMicrodistricts(options) {
        return {
            store: DevExpress.data.AspNet.createStore({
                key: "ID",
                loadUrl: '@Url.Action("GetMicrodistricts", "TerritorialUnitsWebApi", new { httproute = true })'
            }),
            filter: options.data ? ["DistrictId", "=", options.data.DistrictId] : null
        };
    }
    function setDistrictValue(rowData, value) {
        rowData.DistrictId = value;
        rowData.MicrodistrictId = null;
    }

    //checks uniqness of phone number
    function asyncValidationNumber(params) {
        //pass all data to a viewmodel
        var model = {};
        model.ID = params.data.ID;
        model.UniqueText = params.value;

        var data = JSON.stringify(model);
        return $.ajax({
            url: '@Url.Action("CheckUniquePhoneNumber", "PhoneNumbersWebApi")',
            type: "Post",
            contentType: "application/json",
            data: data,
            error: (error) => {
                console.log(JSON.stringify(error));
            }
        });
    }
    //add phone button is displayed with text
    function customizeAddBtn(e) {
        e.toolbarOptions.items[0].showText = "Always";
    }

    function savePhoneNumber() {
        var dataGrid = $("#PhoneNumbers").dxDataGrid("instance");
        dataGrid.saveEditData();
    }
    function deletePhoneNumber(e) {
        var dataGrid = $("#PhoneNumbers").dxDataGrid("instance");
        var index = dataGrid.option("focusedRowIndex");
        console.log(index);
        $("#PhoneNumbersPopup").dxPopup("hide");
        dataGrid.deleteRow(index);

    }
</script>