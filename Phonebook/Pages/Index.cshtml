@page
@{
    ViewData["Title"] = "PhoneNumbers";
}

<h2>Телефонный справочник</h2>

@(Html.DevExtreme().DataGrid<Phonebook.Models.PhoneNumber.PhoneNumber>()
    .ID("PhoneNumbers")
    .DataSource(ds => ds.Mvc()
        .Controller("PhoneNumbersWebApi")
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("ID")
    )
    .OnToolbarPreparing("customizeAddBtn")
    .HeaderFilter(headerFilter => headerFilter.Visible(true))
    .FilterRow(filterRow => filterRow
        .Visible(true)
        .ApplyFilter(GridApplyFilterMode.Auto)
    )
    .RemoteOperations(true)
    .FocusedRowEnabled(true)
    .ColumnChooser(c => c.Enabled(true))

    .Columns(columns => {

        columns.AddFor(m => m.DistrictId)
            .SetCellValue("setDistrictValue")
            .Lookup(lookup => lookup
                    .DataSource(d => d.Mvc().Controller("TerritorialUnitsWebApi").LoadAction("GetDistricts").Key("ID"))
                    .ValueExpr("ID")
                    .DisplayExpr("Name")
                );

        columns.AddFor(m => m.MicrodistrictId)
            .Lookup(lookup => lookup
                    .DataSource("getMicrodistricts")
                    .ValueExpr("ID")
                    .DisplayExpr("Name")
                );

        columns.AddFor(m => m.Address);

        columns.AddFor(m => m.FullName);

        columns.AddFor(m => m.Number)
            .CellTemplate(new JS("customizePhoneNumber"))
            .ValidationRules(vr =>
            {
                vr.AddAsync()
                    .Message("Данный номер уже есть в телефонном справочнике.")
                    .ValidationCallback("asyncValidationNumber");
            });

        columns.AddFor(m => m.Note);


        columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Visible(false);
    })
    .Editing(e => e
        .Mode(GridEditMode.Popup)
        .AllowAdding(true)
        .AllowUpdating(true)
        .Texts(texts => texts.AddRow("Добавить телефон"))
        .AllowDeleting(true)
        .UseIcons(true)
        .Popup(p => p
            .Title("Телефонная карточка")
            .ID("PhoneNumbersPopup")
            .ShowTitle(true)
            .MaxWidth(700)
            .Height(525)
            .ToolbarItems(ti =>
            {
                ti.Add()
                   .Widget(w => w.Button()
                       .Text("Удалить")
                       .OnClick("deleteFocusedPhoneNumberFromPopup")
                       .ID("DeletePhoneNumberButton")
                       .Type(ButtonType.Danger)
                       .StylingMode(ButtonStylingMode.Outlined))
                   .Location(ToolbarItemLocation.Before)
                   .Toolbar(Toolbar.Bottom);

                ti.Add()
                    .Widget(w => w.Button()
                        .Text("Сохранить")
                        .OnClick("savePhoneNumber")
                        .Type(ButtonType.Success)
                        .StylingMode(ButtonStylingMode.Outlined))
                    .Location(ToolbarItemLocation.After)
                    .Toolbar(Toolbar.Bottom);

            })
        )
        .Form(f => f.Items(items =>
        {
            items.AddGroup()
                .ColCount(1)
                .ColSpan(2)
                .Items(groupItems =>
                {
                    groupItems.AddSimpleFor(m => m.DistrictId);
                    groupItems.AddSimpleFor(m => m.MicrodistrictId);
                    groupItems.AddSimpleFor(m => m.Address);
                    groupItems.AddSimpleFor(m => m.FullName);
                    groupItems.AddSimpleFor(m => m.Number)
                            .Editor(e => e
                                .TextBox()
                                .Mask("+7 (X00) 000-00-00")
                                .MaskRules(new { X = new JS("/[02-9]/") })
                            );

                    groupItems.AddSimpleFor(m => m.Note)
                        .Editor(editor => editor.TextArea().Height(100));
                });
        })
        .ID("PhoneNumbersForm"))

    )
    .OnEditorPreparing("onEditorPreparing")
    .LoadPanel(loadPanel => loadPanel.Enabled(false))
    .Scrolling(scrolling => scrolling
        .Mode(GridScrollingMode.Virtual)
        .RowRenderingMode(GridRowRenderingMode.Virtual))
    .Paging(p => p.PageSize(50))
    .OnContextMenuPreparing("parseContextMenu")
   
)

@section Styles{
    <style>
        .JQ_EditButton {
            display: none;
        }

        .dx-theme-generic-typography .dx-row-focused a.phonebook__link {
            color: white;
        }

        #IndexNavItem a {
            border-bottom: 2px solid #728e94;
        }
    </style>
}


@section Scripts{
    <script src="~/js/pages/index.js" asp-append-version="true"></script>
    <script>
        function getMicrodistricts(options) {
            return {
                store: DevExpress.data.AspNet.createStore({
                    key: "ID",
                    loadUrl: '@Url.Action("GetMicrodistricts", "TerritorialUnitsWebApi", new { httproute = true })'
                }),
                filter: options.data ? ["DistrictId", "=", options.data.DistrictId] : null
            };
        }
    </script>
}