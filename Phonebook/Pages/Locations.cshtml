@page
@{
    ViewData["Title"] = "Locations";
}

<h2>Административные округа и районы</h2>
<div class="row no-gutters">
    <div class="col">
        @(Html.DevExtreme().DataGrid<Phonebook.Models.Location.District>()
            .ID("districts")
            .DataSource(ds => ds.Mvc()
                .Controller("TerritorialUnitsWebApi")
                .LoadAction("GetDistricts")
                .InsertAction("PostDistrict")
                .UpdateAction("PutDistrict")
                .DeleteAction("Delete")
                .Key("ID")
            )
            .Selection(s => s.Mode(SelectionMode.Single))
            .HoverStateEnabled(true)
            .RemoteOperations(true)
            .ShowColumnHeaders(false)
            .ShowBorders(false)
            .ShowColumnLines(false)
            .ShowRowLines(false)
            .Columns(columns => {

                columns.AddFor(m => m.Name)
                .ValidationRules(vr =>
                {
                    vr.AddAsync()
                        .Message("Название административного округа должно быть уникально.")
                        .ValidationCallback("asyncValidationName");
                });

                columns.Add().Type(GridCommandColumnType.Buttons)
                   .Visible(false);

                columns.Add()
                    .Type(GridCommandColumnType.Buttons)
                    .Buttons(btns =>
                    {
                        btns.Add().Name(GridColumnButtonName.Save);
                    });
            })
            .Editing(e => e
                .Mode(GridEditMode.Row)
                .AllowAdding(true)
                .AllowUpdating(true)
                .AllowDeleting(true)
                .UseIcons(true)
            )
            .OnContentReady("selection")
            .OnSelectionChanged("selection")
            .OnContextMenuPreparing("parseContextMenu")
            .OnToolbarPreparing("hideToolbar")
        )
    </div>
    <div class="col">
        @(Html.DevExtreme().DataGrid<Phonebook.Models.Location.Microdistrict>()
            .ID("microdistricts")
            .DataSource(ds => ds.Mvc()
                .Controller("TerritorialUnitsWebApi")
                .LoadAction("GetMicrodistricts")
                .InsertAction("PostMicrodistrict")
                .UpdateAction("PutMicrodistrict")
                .DeleteAction("Delete")
                .Key("ID")
            )
            .ShowColumnHeaders(false)
            .ShowBorders(false)
            .ShowColumnLines(false)
            .ShowRowLines(false)
            .RemoteOperations(true)
            .Columns(columns => {

                columns.AddFor(m => m.Name)
                    .ValidationRules(vr =>
                    {
                        vr.AddAsync()
                            .Message("Название района должно быть уникально.")
                            .ValidationCallback("asyncValidationName");
                    });
                columns.AddFor(m => m.DistrictId)
                    .Lookup(lookup => lookup
                                .DataSource(d => d.Mvc().Controller("TerritorialUnitsWebApi").LoadAction("GetDistricts").Key("ID"))
                                .ValueExpr("ID")
                                .DisplayExpr("Name")
                            )
                    .ValidationRules(vr =>
                        {
                            vr.AddRequired()
                               .Message("Необходимо указать соответсвующий административный округ.");
                        })
                    .Visible(false);

                columns.Add().Type(GridCommandColumnType.Buttons)
                    .Visible(false);

                columns.Add()
                    .Type(GridCommandColumnType.Buttons)
                    .Buttons(btns =>
                    {
                        btns.Add().Name(GridColumnButtonName.Save);
                    });
            })
            .Editing(e => e
                .Mode(GridEditMode.Popup)
                .AllowAdding(true)
                .AllowUpdating(true)
                .AllowDeleting(true)
                .UseIcons(true)
                .Popup(p => p
                    .Title("Район")
                    .ID("MicrodistrictPopup")
                    .ShowTitle(true)
                    .MaxWidth(500)
                    .MaxHeight(285)
                )
                .Form(f => f.Items(items =>
                {
                    items.AddGroup()
                        .ColCount(1)
                        .ColSpan(2)
                        .Items(groupItems =>
                        {
                            groupItems.AddSimpleFor(m => m.DistrictId);
                            groupItems.AddSimpleFor(m => m.Name);
                        });
                })
                .ID("MicrodistrictForm"))

            )
            .OnContextMenuPreparing("parseContextMenu")
            .OnToolbarPreparing("hideToolbar")
        )
    </div>
</div>



<script>

    function selection(selectedItems) {
        var dataGridMicrodistrict = $("#microdistricts").dxDataGrid("instance");
        var districtId;
        if (!selectedItems.selectedRowKeys) {
            //select first district
            var dataGridDistrict = $("#districts").dxDataGrid("instance");
            dataGridDistrict.selectRowsByIndexes(0);
            //get Id of first district
            districtId = dataGridDistrict.getKeyByRowIndex(0);
        }
        else {
            //get Id of selected district
            districtId = selectedItems.selectedRowKeys[0];
        }
        //filter microdistricts by selected district
        dataGridMicrodistrict.filter(["DistrictId", "=", districtId]);
    }

    //checks uniqness of phone number
    function asyncValidationName(params) {
        //create UniqueViewModel
        var model = {};
        model.id = params.data.ID;
        model.UniqueText = params.value;

        var data = JSON.stringify(model);
        return $.ajax({
            url: '@Url.Action("CheckUniqueName", "TerritorialUnitsWebApi")',
            type: "Post",
            contentType: "application/json",
            data: data,
            error: (error) => {
                console.log(JSON.stringify(error));
            }
        });
    }

    //create context menu
    function parseContextMenu(e) {
        if (e.row.rowType === "data") {
            e.items = [{
                text: "Редактировать",
                onItemClick: function () {
                    e.component.editRow(e.row.rowIndex);
                }
            },
            {
                text: "Добавить",
                onItemClick: function () {
                    e.component.addRow();
                }
            },
            {
                text: "Удалить",
                onItemClick: function () {
                    e.component.deleteRow(e.row.rowIndex);
                }
            }];
        }
    }

    //hide toolbar because we use context menu
    function hideToolbar(e) {
        e.toolbarOptions.visible = false;  
    }

</script>